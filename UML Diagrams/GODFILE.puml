@startuml


iVehicle <|-- Car
iVehicle <|-- Truck

Car <|-- Volvo240
Car <|-- Saab95

Loadable <|-- LoadingSystem
Movable <|-- MovingSystem



Truck <|--  CarTrailer
Truck <|-- Scania


CarTrailer *-- TruckBed
Scania *-- TruckBed

CarTrailer *-- Engine
Scania *-- Engine

Saab95 *-- Engine
Volvo240 *-- Engine

Engine *-- MovingSystem


MovingSystem *-- Directions

TruckBed *-- LoadingSystem
CarMechanic *-- LoadingSystem




class LoadingSystem <T> {
- loadedDeque : Deque <T>
+ load (object : T) : void
+ unload () : void
+ returnSize () : void
+ returnLast () : T
+ showStack () : String
}


class MovingSystem {
+ direction : Directions
- x : double
- y : double
----
+ setX (x : double) : void
+ setY (y : double) : void
+ getX (x : double) : double
+ getY (y : double) : double
+ turnLeft () : void
+ turnRight () : void
+ move (currentSpeed : double) : void
}


interface Loadable {
load (object : T) : void
unload () : void
returnSize () : double
showStack () : String
returnLast() : T
}

interface Movable{
move (currentSpeed : double) : void
turnLeft () : void
turnRight () : void
}

interface iVehicle{

getMovingSystem() : MovingSystem
getCurrentSpeed() : double
getEngine() : Engine
brake(amount : double) : void
gas (amount : double) : void
}

enum Directions {
UP
DOWN
LEFT
RIGHT
}

class CarTrailer {
- final trailerEngine : Engine
- final trailerTruckBed : TruckBed
---
+ getCurrentSpeed() : double
# openRamp() : void
# closeRamp() : void
# load(Car) : void
# unLoad() : void
# move() : void
# turnLeft() : void
# turnRight() : void
# gas() : void
# brake() : void
# speedFactor() : double
}

class Scania {
Engine : scaniaEngine
TruckBed : scaniaTruckBed
---
getCurrentSpeed() : double
# openRamp() : void
# closeRamp() : void
# load(Car) : void
# unLoad() : void
# move() : void
# turnLeft() : void
# turnRight() : void
# gas() : void
# brake() : void
# speedFactor() : double
}

class Truck{
Truck(String,int,Color,double)
---
#truckMovingSystem:MovingSystem
+getMovingSystem():MovingSystem
-modelName:String
-nrDoors:int
-Color:color
-double:weight
-currentSpeed:double
---
+getModelName():String
+getNrDoors():int
+getColor():Color
+getWeight:double
+abstract getCurrentSpeed():double
# openRamp() : void
# closeRamp() : void
# load(Car) : void
# unLoad() : void
# move() : void
# turnLeft() : void
# turnRight() : void
# gas() : void
# brake() : void
# abstract speedFactor() : double

}


abstract class Car {
# carMovingSystem : MovingSystem
- weight : double
- color : Color
- modelName : String
- nrDoors : int
----
+ getMovingSystem() : MovingSystem
+ abstract getCurrentSpeed() : double
+ getModelName() : String
+ getNrDoors() : int
+ getColor() : Color
+ abstract getEngine() : Engine
+ abstract getWeight() : double
# abstract move() : void
+ abstract gas(amount : double) : void
+ abstract brake (amount : double) : void
+ abstract turnRight() : void
+ abstract turnLeft() : void
+ abstract speedFactor() : double
}

class Volvo240 {
- final volvoEngine : Engine
- final trimFactor : double
----
+ move () : void
+ gas (amount : double) : void
+ brake (amount : double) : void
+ turnRight () : void
+ turnLeft () : void
# speedFactor () : double
+ getEngine () : Engine
+ getWeight () : double
+ getCurrentSpeed () : double
}

class Saab95{
- final saabEngine : Engine
- turboOn : boolean
----
+ setTurboOn () : void
+ setTurboOff () : void
# speedFactor () : double
+ getEngine () : Engine
+ getWeight() : double
+ getCurrentSpeed() : double
# move() : void
+ gas (amount : double) : void
+ brake (amount : double) : void
+ turnRight () : void
+ turnLeft () : void
}

class TruckBed {
- truckBedLoadingSystem : LoadingSystem<Car>
- final bedType : String
- final carryCapacity : double
- final maxAngle : double
- currentLoad : double
- currentAngle : double

+ TruckBed(double, double, String)
+ getCarryCapacity() : double
+ getCurrentLoad() : double
+ getCurrentAngle() : double
+ getMaxAngle() : double
+ openRamp() : void
+ closeRamp() : void
+ setAngle(double) : void
+ load(Car) : void
- loadHelper (Car) : boolean
- loadCar(Car) : void
+ unload() : void
- unLoadCar() : void

}


class Engine {
- final enginePower: double
- currentSpeed : double
+ Engine(double)
+ getEnginePower() : double
+ getCurrentSpeed() : double
+ startEngine() : void
+ stopEngine() : void
+ gas () : void
+ brake : void
- incrementSpeed() : void
- decrementSpeed() : void
}

class CarMechanic <Car> {
maxAmountOfCars : int
- final mechanicLoadingSystem : LoadingSystem<Car>
+ getAmountOfCarsInCarMechanic() : double
+ CarMechanic(int)
+ loadToMechanic(Car) : void
+ unLoad() : void
}


ActionListener <|-- TimeListener


CarController *-- iVehicle
CarController *-- CarView
class CarController {


-final delay: int
-timer:Timer
-frame:CarView
cars:ArrayList<Cars>
brakeAndTurnAround(vehicle : iVehicle) : void
gas(int):void
carHitsWall(vehicle : iVehicle) : boolean
stopCar():void
brake(int):void
startEngine():void
turnLeft():void
turnRight():void

class TimeListener{
+actionPerformed (e : ActionEvent) : void
}



JFrame <|-- CarView

CarView *-- CarController
class CarView{
- static final X : int
- static final Y : int

gasAmount : int
brakeAmount : int

vehicleC : CarController
drawPanel : DrawPanel
controlPanel : JPanel
gasPanel : JPanel
gasSpinner : JSpinner
brakeSpinner : JSpinner

gasLabel : JLabel
gasButton : JButton
brakeButton : JButton
turboOnButton : JButton
turboOffButton : JButton
liftBedButton : JButton
lowerBedButton : JButton
startButton : JButton
stopButton : JButton
turnLeftButton : JButton
turnRightButton : JButton
----
+ CarView (framename : String, cc : CarController)
- initComponents (title : String) : void
+ getDrawPanelXCoordinate () : int
+ getDrawPanelYCoordinate () : int


}



JPanel <|-- DrawPanel

DrawPanel *-- CarView
class DrawPanel{
volvoImage: BufferedImage
scaniaImage: BufferedImage
saabImage: BufferedImage

volvoPoint : Point
scaniaPoint : Point
saabPoint : Point

- static witchCar : int

----

moveIt (x : int, y : int) : void
+ drawPanel (x : int, y : int)
# paintComponent (g : Graphics) : void

}



@enduml